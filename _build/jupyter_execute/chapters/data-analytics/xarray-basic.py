#!/usr/bin/env python
# coding: utf-8

# # Xarray tutorial

# `Xarray` is an open source project and Python package that makes working with labelled multi-dimensional arrays simple, efficient, and fun!

# ## Install xarray
# If you run code on your own computer, you need to install `xarray`. Open the console and enter ```pip install xarray``` or execute ```!pip install xarray``` is this jupyter notebook.

# In[1]:


try:
    import xarray as xr
except ModuleNotFoundError:
    get_ipython().system('pip install xarray')
    import xarray as xr

print(xr.__version__)


# In[2]:


import pandas as pd
import numpy as np


# ## Introduction to xarray Data Structures
# Like `pandas`, `xarray` has two core data structures:
# - `DataArray`
# - `Dataset`
# 
# The `DataArray` is designed to hold a single multi-dimensional variable and its coordinates, and the `Dataset` is designed to hold multiple variables that potentially share the same coordinates.

# ## DataArray
# DataArray has four important attributes:
# * `values` is a array of `Numpy` and includes the data. 
# * `dims` is a `tuple` that includes the names of all dimensions of `values` and its length is dimensions.
# * `coords` is a dict-like built-in data structure of xarray and includes coordinate list or 1D-array of each dimension.
# * `attrs` is a `dict` and you can use `attrs` to define some custom attributes.

# ### Defining a DataArray

# You can use the `DataArray()` function to create a DataArray. There are 4 arguments corresponding to the four attributes above. The `data` argument is corresponding to `values` attribute. 

# In[3]:


da = xr.DataArray(data=[[1,2,3],
                       [2,3,4]],
                   dims=['x','y'],
                   coords={'x': [10, 20],
                    'y': [10, 20, 30]},
                  attrs={'summary':'This is a custom DataArray for tutorial',
                        'license':'CC BY-NC-ND 4.0'})
da


# In[4]:


da.values


# In[5]:


da.dims


# In[6]:


da.coords


# In[7]:


da.attrs


# You can specify the `data` argument to create a `DataArray`. By default, `dims` of DataArray is `('dim_0', 'dim_1', ...)` and `attrs` of da is a empty `dict`.

# In[8]:


da = xr.DataArray(data=[[1,2,3],
                       [2,3,4]])
da


# In[9]:


da.dims


# In[10]:


da.attrs


# In[11]:


da.coords


# ### Change attribute

# In[12]:


da = xr.DataArray(data=[[1,2,3],
                       [2,3,4]],
                   dims=['x','y'],
                   coords={'x': [10, 20],
                    'y': [10, 20, 30]},
                  attrs={'summary':'This is a custom DataArray for tutorial',
                        'license':'CC BY-NC-ND 4.0'})
da


# In[13]:


# change values
da.values = np.random.rand(2,3)
# change dims
da.rename(['m', 'n']) 
# add attrs
da.attrs['gen'] = 'generated by numpy randomly'
# delete attrs
del da.attrs['summary']
da


# ## Datasets
# Datasets has three important attributes:
# 1. `data_vars` is a `dict` with each key as the name of the variable or the dimension and each value as one of:
#   - **1D-array** or **list**
#   - `Series` of `pandas`
#   - `DataFrame` of `pandas`
#   - `tuple`  with two elements
#   - `DataArray`

# **1D-array** or **list**: When value of the `dict` is a 1D-array or list, the key of the `dict` is the name of the dimension and corresponding 1D-array or list is coordinates of the dimension.

# In[14]:


import pandas as pd
ds = xr.Dataset(data_vars={'v1':    [1, 2, 3],
                   'v2': np.array([1, 2, 3])})
ds


# The `Series` of `pandas`: When value of the `dict` is a `Series` of `pandas`, the key of the `dict` is the name of the variable and values of the `Series` is values of the variable.  The `index` of the `Series` is values of coordinates of the variable.

# In[15]:


ds = xr.Dataset(data_vars={'v1': pd.Series([1, 2, 3], index=['a', 'b', 'c'])})
ds


# In[16]:


s = pd.Series([1, 2, 3], index=['a', 'b', 'c'])
s.index.name = 'str'
ds = xr.Dataset(data_vars={'v1': s})
ds


# The `DataFrame` of `pandas`: When value of the `dict` is a `DataFrame`, the key of the `dict` is the name of the variable and values of the `DataFrame` is values of the variable.  The `index` and `columns` of the `DataFrame` is values of coordinates of the variable. Therefore, the variable constructed by `DataFrame` has two dimensions.

# In[17]:


df = pd.DataFrame([1, 2, 3], index=['a', 'b', 'c'])
df.index.name = 'str'
ds = xr.Dataset(data_vars={'v1': df})
ds


# In[18]:


df = pd.DataFrame([[1, 2],
                  [2, 5], 
                  [3, 6]], index=['a', 'b', 'c'], columns=['c1', 'c2'])
df.index.name = 'str'
ds = xr.Dataset(data_vars={'v1': df})
ds


# `tuple` with two elements: When value of the `dict` is a `tuple`, the key of the `dict` is the name of the variable. The first elements of the `tuple` is name of dimension of the variable and second elements of the `tuple` is values of the variable.

# In[19]:


tp = (('d1', 'd2'),[[1, 2],
      [2, 5], 
      [3, 6]])
ds = xr.Dataset(data_vars={'v1': tp})
ds


# `DataArray`:  When value of the `dict` is a `DataArray`, the key of the `dict` is the name of the variable. The dimensions and coordinates of the `DataArray` will be add to `Dataset` created.

# In[20]:


da = xr.DataArray(data=[[1,2,3],
                       [2,3,4]],
                   dims=['x','y'],
                   coords={'x': [10, 20],
                    'y': [10, 20, 30]},
                  attrs={'summary':'This is a custom DataArray for tutorial',
                        'license':'CC BY-NC-ND 4.0'})
da


# In[21]:


ds = xr.Dataset(data_vars={'v1': da})
ds


# 2. `coords` also is a `dict`. The key of the `dict` is the name of the dimension and the values of the `dict` is the coordinate of the dimension.

# In[22]:


tp = (('d1', 'd2'),[[1, 2],
      [2, 5], 
      [3, 6]])
ds = xr.Dataset(data_vars={'v1': tp},coords={'d1':['a', 'b', 'c'], 'd2':['c1', 'c2']})
ds


# 3. `attrs` also is a `dict` that is same as the `attrs` of `DataArray`.

# ## Operations and Mathematical Functions

# Data variables can be modified through Mathematical Functions which is same as array of `Numpy`

# In[23]:


da = xr.DataArray(data=[[1,2,3],
                       [2,3,4]],
                   dims=['x','y'],
                   coords={'x': [10, 20],
                    'y': [10, 20, 30]})
print(da*10)
print(np.log(da))


# In[24]:


da = xr.DataArray(data=[[1,2,3],
                       [2,3,4]],
                   dims=['x','y'],
                   coords={'x': [10, 20],
                    'y': [10, 20, 30]})
ds = xr.Dataset(data_vars={'v1': da})
print(ds*10)
print(np.log(ds))


# ## Loading Data from netCDF Files

# NetCDF (Network Common Data Format) is a widely used format for distributing geoscience data. For more details about netCDF please access [netCDF website](https://www.unidata.ucar.edu/software/netcdf/docs/faq.html#whatisit)

# Call `open_dataset` function open `netCDF` file. For more details about reading and writing netCDF files please access [xarray netCDF docs](http://xarray.pydata.org/en/latest/user-guide/io.html#netcdf). Below we download and load some the ERA5 dataset.

# In[25]:


# data source: https://cds.climate.copernicus.eu/cdsapp#!/dataset/reanalysis-era5-single-levels?tab=form
ds = xr.open_dataset('../../assets/data/era5_singapore_2021.9.1.nc')
ds


# ## Selecting the Internal Data

# You can directly access `Coordinates` and `Data variables` by their name.

# In[26]:


ds = xr.open_dataset('../../assets/data/era5_singapore_2021.9.1.nc')
ds


# In[27]:


ds.t2m


# In[28]:


ds.time


# In[29]:


ds.longitude


# Below you can access the specific value by the number index or slices

# In[30]:


# first value of time dimension
ds.time[0]


# In[31]:


# get a 2-demension data with first time index 
ds.t2m[0]


# You also can use `sel()` function to use label-based indexing.

# In[32]:


ds.t2m.sel(time=ds.time[0])


# In[33]:


#  compute the average value in 2021-09-01 00:00:00
ds.t2m[0].values.mean()


# ## References
# + [Xarray Fundamentals of Earth and Enrivonmental Data Science](https://earth-env-data-science.github.io/lectures/xarray/xarray.html).
# + [Xarray documentation](http://xarray.pydata.org/en/latest/index.html)
